[{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ready4-dev.github.io/costly/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ready4-dev.github.io/costly/articles/V_01.html","id":"in-brief","dir":"Articles","previous_headings":"","what":"In brief","title":"Standardise Variable Values With Fuzzy Logic And Correspondence Tables","text":"steps described explained vignette can also (succinctly) accomplished following code.","code":"X <- CostlyCountries()  X <- renew(X, type_1L_chr = \"default\")  X <- renew(X, \"jw\", type_1L_chr = \"slot\", what_1L_chr = \"logic\")  X <- renew(X, T, type_1L_chr = \"slot\", what_1L_chr = \"force\") X <- ratify(X)"},{"path":"https://ready4-dev.github.io/costly/articles/V_01.html","id":"create-project","dir":"Articles","previous_headings":"","what":"Create project","title":"Standardise Variable Values With Fuzzy Logic And Correspondence Tables","text":"begin creating X, instance CostlyCorrespondences module.","code":"X <- CostlyCorrespondences()"},{"path":"https://ready4-dev.github.io/costly/articles/V_01.html","id":"supply-seed-dataset","dir":"Articles","previous_headings":"","what":"Supply seed dataset","title":"Standardise Variable Values With Fuzzy Logic And Correspondence Tables","text":"begin creating CostlySeed module instance includes dataset containing variable interest (case, countries). dataset needs paired dataset dictionary using Ready4useDyad module ready4use R library. can supply custom standards dataset (tibble), dictionary (ready4use_dictionary) concept represented variable interest using command following format. add_default_country_seed function perform previous step using values pair world.cities dataset maps R library appropriate dictionary specifies countries concept standardising. can now inspect first records labelled seed dataset. Dataset can also inspect data dictionary contained . Data Dictionary now specify dictionary category corresponds variable wish standardise (“Country”). need use category name label results objects generate subsequent steps. now add X.","code":"# Not run # A <- CostlySeed(Ready4useDyad_r4 = Ready4useDyad(ds_tb = tibble::tibble(), dictionary_r3 = ready4use_dictionary()), include_chr = c(\"Country\"), label_1L_chr = \"Country\") A <- CostlySeed() %>% add_default_country_seed() renewSlot(A, \"Ready4useDyad_r4\", type_1L_chr = \"label\") %>% exhibitSlot(\"Ready4useDyad_r4\", display_1L_chr = \"head\", scroll_box_args_ls = list(width = \"100%\")) exhibitSlot(A, \"Ready4useDyad_r4\", type_1L_chr = \"dict\", scroll_box_args_ls = list(width = \"100%\")) A@include_chr <- A@label_1L_chr <- \"Country\" X <- renew(X, A, what_1L_chr = \"seed\")"},{"path":"https://ready4-dev.github.io/costly/articles/V_01.html","id":"specify-standards","dir":"Articles","previous_headings":"","what":"Specify standards","title":"Standardise Variable Values With Fuzzy Logic And Correspondence Tables","text":"next must specify dataset includes complete list allowable variable values. workflow step similar specifying standards, except instead CostlySeed module use CostlyStandards module. many cases using ISO_3166_1 dataset ISOcodes library optimal choice standardised form country names. can use add_country_standards function pair dataset dictionary create B, CostlyStandards module instance. can inspect first cases labelled version dataset B. Dataset can also inspect data dictionary contained B. Data Dictionary can now specifying concept (“Category” column data dictionary) specifies allowable values target variable concepts plan use fuzzy logic matching (described ). now add B X.","code":"# Not run # Y <- CostlyStandards(Ready4useDyad_r4 = Ready4useDyad(ds_tb = tibble::tibble(), dictionary_r3 = ready4use_dictionary())) B <- CostlyStandards(Ready4useDyad_r4 = Ready4useDyad() %>% add_country_standards()) renewSlot(B, \"Ready4useDyad_r4\", type_1L_chr = \"label\") %>%    exhibitSlot(\"Ready4useDyad_r4\", display_1L_chr = \"head\", scroll_box_args_ls = list(width = \"100%\")) exhibitSlot(B, \"Ready4useDyad_r4\", type_1L_chr = \"dict\", scroll_box_args_ls = list(width = \"100%\")) B@label_1L_chr <- \"Country\" B@include_chr <- c(\"Country\", \"Official\",\"Common\",\"A3\",\"A2\") X <- renew(X, B, what_1L_chr = \"standards\")"},{"path":"https://ready4-dev.github.io/costly/articles/V_01.html","id":"compare-variable-of-interest-values-from-seed-and-standards-dataset-","dir":"Articles","previous_headings":"","what":"Compare variable of interest values from seed and standards dataset.","title":"Standardise Variable Values With Fuzzy Logic And Correspondence Tables","text":"identify disparities variable interest seed standards datasets can use ratify method. Supplying value “identity” ensures output differ input slot reserved results. can now identify values seed dataset variable interest standard values. can also identify standard values present seed dataset variable interest.","code":"X <- ratify(X, new_val_xx = \"identity\") X@results_ls$Country_Output_Validation$Invalid_Values X@results_ls$Country_Output_Validation$Absent_Values ##  [1] \"Åland Islands\"                                ##  [2] \"Antarctica\"                                   ##  [3] \"Bolivia, Plurinational State of\"              ##  [4] \"Bonaire, Sint Eustatius and Saba\"             ##  [5] \"Bouvet Island\"                                ##  [6] \"British Indian Ocean Territory\"               ##  [7] \"Brunei Darussalam\"                            ##  [8] \"Cabo Verde\"                                   ##  [9] \"Christmas Island\"                             ## [10] \"Cocos (Keeling) Islands\"                      ## [11] \"Congo, The Democratic Republic of the\"        ## [12] \"Côte d'Ivoire\"                                ## [13] \"Curaçao\"                                      ## [14] \"Czechia\"                                      ## [15] \"Eswatini\"                                     ## [16] \"Falkland Islands (Malvinas)\"                  ## [17] \"French Southern Territories\"                  ## [18] \"Guernsey\"                                     ## [19] \"Heard Island and McDonald Islands\"            ## [20] \"Holy See (Vatican City State)\"                ## [21] \"Hong Kong\"                                    ## [22] \"Iran, Islamic Republic of\"                    ## [23] \"Korea, Democratic People's Republic of\"       ## [24] \"Korea, Republic of\"                           ## [25] \"Lao People's Democratic Republic\"             ## [26] \"Macao\"                                        ## [27] \"Micronesia, Federated States of\"              ## [28] \"Moldova, Republic of\"                         ## [29] \"Palestine, State of\"                          ## [30] \"Réunion\"                                      ## [31] \"Russian Federation\"                           ## [32] \"Saint Barthélemy\"                             ## [33] \"Saint Helena, Ascension and Tristan da Cunha\" ## [34] \"Saint Martin (French part)\"                   ## [35] \"Saint Vincent and the Grenadines\"             ## [36] \"Sint Maarten (Dutch part)\"                    ## [37] \"South Georgia and the South Sandwich Islands\" ## [38] \"Syrian Arab Republic\"                         ## [39] \"Taiwan, Province of China\"                    ## [40] \"Tanzania, United Republic of\"                 ## [41] \"Timor-Leste\"                                  ## [42] \"Turks and Caicos Islands\"                     ## [43] \"United Kingdom\"                               ## [44] \"United States\"                                ## [45] \"United States Minor Outlying Islands\"         ## [46] \"Venezuela, Bolivarian Republic of\"            ## [47] \"Viet Nam\"                                     ## [48] \"Virgin Islands, British\"                      ## [49] \"Virgin Islands, U.S.\""},{"path":"https://ready4-dev.github.io/costly/articles/V_01.html","id":"standardise-variable-values","dir":"Articles","previous_headings":"","what":"Standardise variable values","title":"Standardise Variable Values With Fuzzy Logic And Correspondence Tables","text":"can explore extent can use fuzzy logic reconcile discrepancies. identify types fuzzy logic algorithms use, run following command explore relevant part documentation stringdist library. case, chosen Jaro, Jaro-Winkler distance method (“jw”). method replace every previously invalid seed dataset variable value best available match identified selected fuzzy logic algorithm. However, replacements spurious can seen inspecting record replacements made. incorrect correspondences, need manually specify correct values. can using ready4show_correspondences sub-module. make_country_correspondences can used shortcut creating alternative correspondences specific example. can inspect values correspondence table. ratify method used apply fuzzy logic algorithm previous step, X modified logic default switched future calls ratify. created new correspondence table specified replacements invalid values, problem. However, example specifying correspondences fuzzy logic algorithm failed, need supply desired fuzzy logic value. now rerun ratify method (example combine fuzzy logic lookups manually created correspondences table). inspect results. correspondences table looks better. still value included standards. can rerun ratify method force removal record included standards dataset. invalid values remain. However, also values standards dataset represented results dataset values. Whether problem depends intended purposes standardised dataset creating. choose rerun previous steps making edits either standards dataset (e.g. delete superfluous, outdated incorrect records use entirely new standards dataset) seed dataset (e.g. adding new records recategorising existing records corresponding values every missing standard value). case going assume missing values cause concern valid use updated dataset intended purposes. can now create new object Y, using results dataset’s Ready4useDyad module instance. can inspect records cases corresponding capital cities new dataset. Dataset","code":"# Not run # help(\"stringdist-metrics\", package=stringdist) X <- renew(X, \"jw\", type_1L_chr = \"slot\", what_1L_chr = \"logic\")  X <- ratify(X, new_val_xx = NULL) X@results_ls$Country_Output_Validation$Invalid_Values ## character(0) X@results_ls$Country_Output_Correspondences ## # A tibble: 41 × 2 ##    old_nms_chr               new_nms_chr                           ##    <chr>                     <chr>                                 ##  1 Azores                    Timor-Leste                           ##  2 Bolivia                   Bolivia, Plurinational State of       ##  3 British Virgin Islands    Virgin Islands, British               ##  4 Brunei                    Brunei Darussalam                     ##  5 Canary Islands            Åland Islands                         ##  6 Cape Verde                Cabo Verde                            ##  7 Congo Democratic Republic Congo, The Democratic Republic of the ##  8 Czech Republic            Czechia                               ##  9 East Timor                Eswatini                              ## 10 Easter Island             Christmas Island                      ## # ℹ 31 more rows # Not run # a <- ready4show::renew.ready4show_correspondences(ready4show::ready4show_correspondences(),  #         old_nms_chr = c(\"old_name_1\", \"old_name_2\", \"etc....\"), new_nms_chr = c(\"new_name_1\", \"new_name_2\", \"etc....\")) a <- make_country_correspondences(\"cities\") exhibit(a, scroll_box_args_ls = list(width = \"100%\")) X <- renew(X, \"jw\", type_1L_chr = \"slot\", what_1L_chr = \"logic\") X <- ratify(X, new_val_xx = a) X@results_ls$Country_Output_Correspondences ## # A tibble: 41 × 2 ##    old_nms_chr               new_nms_chr                           ##    <chr>                     <chr>                                 ##  1 Azores                    Portugal                              ##  2 Bolivia                   Bolivia, Plurinational State of       ##  3 British Virgin Islands    Virgin Islands, British               ##  4 Brunei                    Brunei Darussalam                     ##  5 Canary Islands            Spain                                 ##  6 Cape Verde                Cabo Verde                            ##  7 Congo Democratic Republic Congo, The Democratic Republic of the ##  8 Czech Republic            Czechia                               ##  9 East Timor                Timor-Leste                           ## 10 Easter Island             Chile                                 ## # ℹ 31 more rows X@results_ls$Country_Output_Validation$Invalid_Values ## [1] \"Kosovo\" X <- renew(X, T, type_1L_chr = \"slot\", what_1L_chr = \"force\")  X <- ratify(X, new_val_xx = \"identity\") X@results_ls$Country_Output_Validation$Invalid_Values ## character(0) X@results_ls$Country_Output_Validation$Absent_Values ##  [1] \"Åland Islands\"                                ##  [2] \"Antarctica\"                                   ##  [3] \"Bouvet Island\"                                ##  [4] \"British Indian Ocean Territory\"               ##  [5] \"Christmas Island\"                             ##  [6] \"Cocos (Keeling) Islands\"                      ##  [7] \"Curaçao\"                                      ##  [8] \"French Southern Territories\"                  ##  [9] \"Heard Island and McDonald Islands\"            ## [10] \"Hong Kong\"                                    ## [11] \"Macao\"                                        ## [12] \"Sint Maarten (Dutch part)\"                    ## [13] \"South Georgia and the South Sandwich Islands\" ## [14] \"United States Minor Outlying Islands\" Y <- X@results_ls$Country_Output_Lookup renewSlot(Y,\"ds_tb\",Y@ds_tb %>% dplyr::filter(capital==1)) %>%   renew(type_1L_chr = \"label\") %>%   exhibit(scroll_box_args_ls = list(width = \"100%\"))"},{"path":"https://ready4-dev.github.io/costly/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Hamilton. Author, maintainer, funder. Monash University. Copyright holder, funder.","code":""},{"path":"https://ready4-dev.github.io/costly/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthew Hamilton <matthew.hamilton1@monash.edu> [aut, cre fnd] (<https://orcid.org/0000-0001-7407-9194>)  (2023). costly: Develop, Use Share Unit Cost Datasets Health Economic Analysis. Version 0.0.0.9021. https://doi.org/10.5281/zenodo.5606250","code":"@Manual{,   doi = {10.5281/zenodo.5606250},   title = {costly: Develop, Use and Share Unit Cost Datasets for Health Economic Analysis},   author = {Matthew Hamilton  [aut, cre, fnd] ()},   year = {2023},   note = {R package version 0.0.0.9021},   url = {https://ready4-dev.github.io/costly/}, }"},{"path":[]},{"path":"https://ready4-dev.github.io/costly/index.html","id":"develop-use-and-share-unit-cost-datasets-for-health-economic-analysis","dir":"","previous_headings":"","what":"Develop, Use and Share Unit Cost Datasets for Health Economic Analysis","title":"Develop, Use and Share Unit Cost Datasets for Health Economic\n    Analysis","text":"Tools undertaking unit costing conjunction computational health economic models developed ready4 framework (https://ready4-dev.github.io/ready4/). development version costly package made available part process testing documenting package. questions, please contact authors (matthew.hamilton2@monash.edu). install development version software, run following commands R console:","code":"utils::install.packages(\"devtools\")  devtools::install_github(\"ready4-dev/costly\")"},{"path":"https://ready4-dev.github.io/costly/reference/CostlyCorrespondences-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CostlyCorrespondences — CostlyCorrespondences-class","title":"CostlyCorrespondences — CostlyCorrespondences-class","text":"Collection input, standards definition results datasets projects generate standardised costing datasets.","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlyCorrespondences-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CostlyCorrespondences — CostlyCorrespondences-class","text":"CostlySeed_r4 Original (non-standardised) dataset (metadata). (ready4 S4) CostlyStandards_r4 Dataset (metadata) defining allowable values specified variables. (ready4 S4) correspondences_r3 Correspondences (ready4 S3) args_ls Arguments (list) force_standard_1L_lgl Force standard (logical vector length one) fuzzy_logic_1L_chr Fuzzy logic (character vector length one) max_distance_1L_dbl Maximum distance (double vector length one) results_ls Results (list) dissemination_1L_chr Dissemination (character vector length one)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlyCountries-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CostlyCountries — CostlyCountries-class","title":"CostlyCountries — CostlyCountries-class","text":"Collection input, standards definition results datasets projects generate standardised country data use costing datasets.","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlyCountries-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CostlyCountries — CostlyCountries-class","text":"CostlySeed_r4 Original (non-standardised) dataset (metadata). (ready4 S4) CostlyStandards_r4 Dataset (metadata) defining allowable values specified variables. (ready4 S4) correspondences_r3 Correspondences (ready4 S3) args_ls Arguments (list) force_standard_1L_lgl Force standard (logical vector length one) fuzzy_logic_1L_chr Fuzzy logic (character vector length one) max_distance_1L_dbl Maximum distance (double vector length one) results_ls Results (list) dissemination_1L_chr Dissemination (character vector length one)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlyCurrencies-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CostlyCurrencies — CostlyCurrencies-class","title":"CostlyCurrencies — CostlyCurrencies-class","text":"Collection input, standards definition results datasets projects generate standardised currency data use costing datasets.","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlyCurrencies-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CostlyCurrencies — CostlyCurrencies-class","text":"CostlySeed_r4 Original (non-standardised) dataset (metadata). (ready4 S4) CostlyStandards_r4 Dataset (metadata) defining allowable values specified variables. (ready4 S4) correspondences_r3 Correspondences (ready4 S3) args_ls Arguments (list) force_standard_1L_lgl Force standard (logical vector length one) fuzzy_logic_1L_chr Fuzzy logic (character vector length one) max_distance_1L_dbl Maximum distance (double vector length one) results_ls Results (list) dissemination_1L_chr Dissemination (character vector length one)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlySeed-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CostlySeed — CostlySeed-class","title":"CostlySeed — CostlySeed-class","text":"Original (non-standardised) dataset (metadata).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlySeed-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CostlySeed — CostlySeed-class","text":"args_ls Arguments (list) Ready4useDyad_r4 dataset data dictionary pair. (ready4 S4) include_chr Include (character vector) label_1L_chr Label (character vector length one) match_1L_chr Match (character vector length one) dissemination_1L_chr Dissemination (character vector length one)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlySource-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CostlySource — CostlySource-class","title":"CostlySource — CostlySource-class","text":"Input dataset (metadata) generating standardised costing datasets.","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlySource-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CostlySource — CostlySource-class","text":"Ready4useDyad_r4 dataset data dictionary pair. (ready4 S4) include_chr Include (character vector) label_1L_chr Label (character vector length one) match_1L_chr Match (character vector length one) dissemination_1L_chr Dissemination (character vector length one)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlyStandards-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CostlyStandards — CostlyStandards-class","title":"CostlyStandards — CostlyStandards-class","text":"Dataset (metadata) defining allowable values specified variables.","code":""},{"path":"https://ready4-dev.github.io/costly/reference/CostlyStandards-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CostlyStandards — CostlyStandards-class","text":"args_ls Arguments (list) Ready4useDyad_r4 dataset data dictionary pair. (ready4 S4) include_chr Include (character vector) label_1L_chr Label (character vector length one) match_1L_chr Match (character vector length one) dissemination_1L_chr Dissemination (character vector length one)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_country_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"Add country standards — add_country_standards","title":"Add country standards — add_country_standards","text":"add_country_standards() Add function updates object adding data object. Specifically, function implements algorithm add country standards. Function argument Ready4useDyad_r4 specifies object updated. function returns dataset data dictionary pair. (ready4 S4).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_country_standards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add country standards — add_country_standards","text":"","code":"add_country_standards(   Ready4useDyad_r4 = ready4use::Ready4useDyad(),   default_pkg_ds_chr = c(\"ISO_3166_1\", \"ISOcodes\") )"},{"path":"https://ready4-dev.github.io/costly/reference/add_country_standards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add country standards — add_country_standards","text":"Ready4useDyad_r4 dataset data dictionary pair. (ready4 S4), Default: ready4use::Ready4useDyad() default_pkg_ds_chr Default package dataset (character vector), Default: c(\"ISO_3166_1\", \"ISOcodes\")","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_country_standards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add country standards — add_country_standards","text":"dataset data dictionary pair. (ready4 S4)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_currency_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"Add currency standards — add_currency_standards","title":"Add currency standards — add_currency_standards","text":"add_currency_standards() Add function updates object adding data object. Specifically, function implements algorithm add currency standards. Function argument Ready4useDyad_r4 specifies object updated. function returns dataset data dictionary pair. (ready4 S4).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_currency_standards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add currency standards — add_currency_standards","text":"","code":"add_currency_standards(   Ready4useDyad_r4 = ready4use::Ready4useDyad(),   default_pkg_ds_chr = c(\"ISO_4217\", \"ISOcodes\") )"},{"path":"https://ready4-dev.github.io/costly/reference/add_currency_standards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add currency standards — add_currency_standards","text":"Ready4useDyad_r4 dataset data dictionary pair. (ready4 S4), Default: ready4use::Ready4useDyad() default_pkg_ds_chr Default package dataset (character vector), Default: c(\"ISO_4217\", \"ISOcodes\")","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_currency_standards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add currency standards — add_currency_standards","text":"dataset data dictionary pair. (ready4 S4)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_default_country_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Add default country seed — add_default_country_seed","title":"Add default country seed — add_default_country_seed","text":"add_default_country_seed() Add function updates object adding data object. Specifically, function implements algorithm add default country seed. Function argument CostlySeed_r4 specifies object updated. function returns Original (non-standardised) dataset (metadata). (ready4 S4).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_default_country_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add default country seed — add_default_country_seed","text":"","code":"add_default_country_seed(CostlySeed_r4 = CostlySeed())"},{"path":"https://ready4-dev.github.io/costly/reference/add_default_country_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add default country seed — add_default_country_seed","text":"CostlySeed_r4 Original (non-standardised) dataset (metadata). (ready4 S4), Default: CostlySeed()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_default_country_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add default country seed — add_default_country_seed","text":"Original (non-standardised) dataset (metadata). (ready4 S4)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_default_currency_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Add default currency seed — add_default_currency_seed","title":"Add default currency seed — add_default_currency_seed","text":"add_default_currency_seed() Add function updates object adding data object. Specifically, function implements algorithm add default currency seed. Function argument CostlySeed_r4 specifies object updated. function returns Original (non-standardised) dataset (metadata). (ready4 S4).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_default_currency_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add default currency seed — add_default_currency_seed","text":"","code":"add_default_currency_seed(   CostlySeed_r4 = CostlySeed(),   include_1L_chr = \"Currency\",   Ready4useDyad_r4 = ready4use::Ready4useDyad() )"},{"path":"https://ready4-dev.github.io/costly/reference/add_default_currency_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add default currency seed — add_default_currency_seed","text":"CostlySeed_r4 Original (non-standardised) dataset (metadata). (ready4 S4), Default: CostlySeed() include_1L_chr Include (character vector length one), Default: 'Currency' Ready4useDyad_r4 dataset data dictionary pair. (ready4 S4), Default: ready4use::Ready4useDyad()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_default_currency_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add default currency seed — add_default_currency_seed","text":"Original (non-standardised) dataset (metadata). (ready4 S4)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_source_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Add source label — add_source_label","title":"Add source label — add_source_label","text":"add_source_label() Add function updates object adding data object. Specifically, function implements algorithm add source label. Function argument CostlySource_r4 specifies object updated. function returns Input dataset (metadata) generating standardised costing datasets. (ready4 S4).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_source_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add source label — add_source_label","text":"","code":"add_source_label(   CostlySource_r4 = CostlySource(),   label_1L_chr = \"Standardised\" )"},{"path":"https://ready4-dev.github.io/costly/reference/add_source_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add source label — add_source_label","text":"CostlySource_r4 Input dataset (metadata) generating standardised costing datasets. (ready4 S4), Default: CostlySource() label_1L_chr Label (character vector length one), Default: 'Standardised'","code":""},{"path":"https://ready4-dev.github.io/costly/reference/add_source_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add source label — add_source_label","text":"Input dataset (metadata) generating standardised costing datasets. (ready4 S4)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/costly-package.html","id":null,"dir":"Reference","previous_headings":"","what":"costly: Develop, Use and Share Unit Cost Datasets for Health Economic Analysis — costly-package","title":"costly: Develop, Use and Share Unit Cost Datasets for Health Economic Analysis — costly-package","text":"Tools undertaking unit costing conjunction computational health economic models developed ready4 framework (https://ready4-dev.github.io/ready4/). development version costly package made available part process testing documenting package. questions, please contact authors (matthew.hamilton2@monash.edu).  Tools undertaking unit costing conjunction computational health economic models developed ready4 framework (https://ready4-dev.github.io/ready4/). development version costly package made available part process testing documenting package. questions, please contact authors (matthew.hamilton2@monash.edu).","code":""},{"path":[]},{"path":"https://ready4-dev.github.io/costly/reference/costly-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"costly: Develop, Use and Share Unit Cost Datasets for Health Economic Analysis — costly-package","text":"Maintainer: Matthew Hamilton matthew.hamilton1@monash.edu (ORCID) [funder] contributors: Monash University [copyright holder, funder]","code":""},{"path":"https://ready4-dev.github.io/costly/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function — deprecated","title":"Deprecated function — deprecated","text":"Import deprecated function recommended lifecycle package documentation.","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_corresponding_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Get corresponding variable — get_corresponding_var","title":"Get corresponding variable — get_corresponding_var","text":"get_corresponding_var() Get function retrieves pre-existing data object memory, local file system online repository. Specifically, function implements algorithm get corresponding variable. Function argument Ready4useDyad_r4 specifies look required object. function returns Corresponding (character vector).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_corresponding_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get corresponding variable — get_corresponding_var","text":"","code":"get_corresponding_var(Ready4useDyad_r4, matches_chr, what_1L_chr = \"concepts\")"},{"path":"https://ready4-dev.github.io/costly/reference/get_corresponding_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get corresponding variable — get_corresponding_var","text":"Ready4useDyad_r4 dataset data dictionary pair. (ready4 S4) matches_chr Matches (character vector) what_1L_chr (character vector length one), Default: 'concepts'","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_corresponding_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get corresponding variable — get_corresponding_var","text":"Corresponding (character vector)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_country_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"Get country standards — get_country_standards","title":"Get country standards — get_country_standards","text":"get_country_standards() Get function retrieves pre-existing data object memory, local file system online repository. Specifically, function implements algorithm get country standards. Function argument names_1L_lgl specifies look required object. function returns Country standards (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_country_standards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get country standards — get_country_standards","text":"","code":"get_country_standards(   names_1L_lgl = F,   default_pkg_ds_chr = c(\"ISO_3166_1\", \"ISOcodes\"),   indices_int = c(4:6, 2, 1),   tbl_index_1L_int = integer(0),   type_1L_chr = \"Countries\",   url_1L_chr = character(0),   what_1L_chr = \"Input_Seed\",   X_Ready4useRepos = ready4use::Ready4useRepos() )"},{"path":"https://ready4-dev.github.io/costly/reference/get_country_standards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get country standards — get_country_standards","text":"names_1L_lgl Names (logical vector length one), Default: F default_pkg_ds_chr Default package dataset (character vector), Default: c(\"ISO_3166_1\", \"ISOcodes\") indices_int Indices (integer vector), Default: c(4:6, 2, 1) tbl_index_1L_int Table index (integer vector length one), Default: integer(0) type_1L_chr Type (character vector length one), Default: 'Countries' url_1L_chr Url (character vector length one), Default: character(0) what_1L_chr (character vector length one), Default: 'Input_Seed' X_Ready4useRepos PARAM_DESCRIPTION, Default: ready4use::Ready4useRepos()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_country_standards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get country standards — get_country_standards","text":"Country standards (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_currency.html","id":null,"dir":"Reference","previous_headings":"","what":"Get currency — get_currency","title":"Get currency — get_currency","text":"get_currency() Get function retrieves pre-existing data object memory, local file system online repository. Specifically, function implements algorithm get currency. Function argument country_1L_chr specifies look required object. function returns Currency (character vector length one).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_currency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get currency — get_currency","text":"","code":"get_currency(   country_1L_chr,   case_when_false_1L_chr = NA_character_,   case_when_true_1L_chr = NA_character_,   case_when_true_ls = NULL,   case_when_var_1L_chr = NA_character_,   country_var_nms_chr = c(\"State or territory[1]\", \"Countries/ territories\"),   currency_tb = NULL,   filter_cdn_1L_chr = NA_character_,   force_standard_1L_lgl = F,   format_1L_chr = \"Name\",   fuzzy_logic_1L_chr = \"jw\",   indcs_int = c(2:3),   seed_df = NULL,   match_var_nm_1L_chr = \"ISO code[2]\",   max_distance_1L_dbl = Inf,   target_var_nm_1L_chr = \"Alpha_3\",   tf_false_val_1L_lgl = T,   type_1L_chr = \"Country\",   url_1L_chr = \"https://en.wikipedia.org/wiki/List_of_circulating_currencies\",   what_1L_chr = \"Symbol\",   correspondences_x_r3 = ready4show::ready4show_correspondences(),   correspondences_y_r3 = ready4show::ready4show_correspondences(),   X_Ready4useRepos = ready4use::Ready4useRepos() )"},{"path":"https://ready4-dev.github.io/costly/reference/get_currency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get currency — get_currency","text":"country_1L_chr Country (character vector length one) case_when_false_1L_chr Case false (character vector length one), Default: 'NA' case_when_true_1L_chr Case true (character vector length one), Default: 'NA' case_when_true_ls Case true (list), Default: NULL case_when_var_1L_chr Case variable (character vector length one), Default: 'NA' country_var_nms_chr Country variable names (character vector), Default: c(\"State territory1\", \"Countries/ territories\") currency_tb Currency (tibble), Default: NULL filter_cdn_1L_chr Filter condition (character vector length one), Default: 'NA' force_standard_1L_lgl Force standard (logical vector length one), Default: F format_1L_chr Format (character vector length one), Default: 'Name' fuzzy_logic_1L_chr Fuzzy logic (character vector length one), Default: 'jw' indcs_int Indices (integer vector), Default: c(2:3) seed_df Seed (data.frame), Default: NULL match_var_nm_1L_chr Match variable name (character vector length one), Default: 'ISO code2' max_distance_1L_dbl Maximum distance (double vector length one), Default: Inf target_var_nm_1L_chr Target variable name (character vector length one), Default: 'Alpha_3' tf_false_val_1L_lgl Transform false value (logical vector length one), Default: T type_1L_chr Type (character vector length one), Default: 'Country' url_1L_chr Url (character vector length one), Default: 'https://en.wikipedia.org/wiki/List_of_circulating_currencies' what_1L_chr (character vector length one), Default: 'Symbol' correspondences_x_r3 Correspondences x (ready4 S3), Default: ready4show::ready4show_correspondences() correspondences_y_r3 Correspondences y (ready4 S3), Default: ready4show::ready4show_correspondences() X_Ready4useRepos PARAM_DESCRIPTION, Default: ready4use::Ready4useRepos()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_currency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get currency — get_currency","text":"Currency (character vector length one)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_currency_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"Get currency standards — get_currency_standards","title":"Get currency standards — get_currency_standards","text":"get_currency_standards() Get function retrieves pre-existing data object memory, local file system online repository. Specifically, function implements algorithm get currency standards. Function argument names_1L_lgl specifies look required object. function returns Country standards (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_currency_standards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get currency standards — get_currency_standards","text":"","code":"get_currency_standards(   names_1L_lgl = F,   default_pkg_ds_chr = c(\"ISO_4217\", \"ISOcodes\"),   indices_int = c(3, 1),   tbl_index_1L_int = integer(0),   type_1L_chr = \"Currency\",   url_1L_chr = character(0),   what_1L_chr = \"Input_Seed\",   X_Ready4useRepos = ready4use::Ready4useRepos() )"},{"path":"https://ready4-dev.github.io/costly/reference/get_currency_standards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get currency standards — get_currency_standards","text":"names_1L_lgl Names (logical vector length one), Default: F default_pkg_ds_chr Default package dataset (character vector), Default: c(\"ISO_4217\", \"ISOcodes\") indices_int Indices (integer vector), Default: c(3, 1) tbl_index_1L_int Table index (integer vector length one), Default: integer(0) type_1L_chr Type (character vector length one), Default: 'Currency' url_1L_chr Url (character vector length one), Default: character(0) what_1L_chr (character vector length one), Default: 'Input_Seed' X_Ready4useRepos PARAM_DESCRIPTION, Default: ready4use::Ready4useRepos()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_currency_standards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get currency standards — get_currency_standards","text":"Country standards (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_currency_tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Get currency tables — get_currency_tbls","title":"Get currency tables — get_currency_tbls","text":"get_currency_tbls() Get function retrieves pre-existing data object memory, local file system online repository. Specifically, function implements algorithm get currency tables. Function argument type_1L_chr specifies look required object. function returns Currency table (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_currency_tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get currency tables — get_currency_tbls","text":"","code":"get_currency_tbls(   type_1L_chr = c(\"Both\", \"Country\", \"Currency\"),   country_var_nms_chr = c(\"State or territory[1]\", \"Countries/ territories\"),   indcs_int = c(2:3),   url_1L_chr = \"https://en.wikipedia.org/wiki/List_of_circulating_currencies\",   correspondences_x_r3 = ready4show::ready4show_correspondences(),   X_Ready4useRepos = ready4use::Ready4useRepos() )"},{"path":"https://ready4-dev.github.io/costly/reference/get_currency_tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get currency tables — get_currency_tbls","text":"type_1L_chr Type (character vector length one), Default: c(\"\", \"Country\", \"Currency\") country_var_nms_chr Country variable names (character vector), Default: c(\"State territory1\", \"Countries/ territories\") indcs_int Indices (integer vector), Default: c(2:3) url_1L_chr Url (character vector length one), Default: 'https://en.wikipedia.org/wiki/List_of_circulating_currencies' correspondences_x_r3 Correspondences x (ready4 S3), Default: ready4show::ready4show_correspondences() X_Ready4useRepos PARAM_DESCRIPTION, Default: ready4use::Ready4useRepos()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_currency_tbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get currency tables — get_currency_tbls","text":"Currency table (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_cities.html","id":null,"dir":"Reference","previous_headings":"","what":"Get seed cities — get_seed_cities","title":"Get seed cities — get_seed_cities","text":"get_seed_cities() Get function retrieves pre-existing data object memory, local file system online repository. Specifically, function implements algorithm get seed cities. Function argument names_1L_lgl specifies look required object. function returns Seed cities (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_cities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get seed cities — get_seed_cities","text":"","code":"get_seed_cities(   names_1L_lgl = F,   indices_int = 2L,   default_pkg_ds_chr = c(\"world.cities\", \"maps\"),   tbl_index_1L_int = integer(0),   type_1L_chr = \"Cities\",   url_1L_chr = character(0),   what_1L_chr = \"Input_Seed\",   X_Ready4useRepos = ready4use::Ready4useRepos() )"},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_cities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get seed cities — get_seed_cities","text":"names_1L_lgl Names (logical vector length one), Default: F indices_int Indices (integer vector), Default: 2 default_pkg_ds_chr Default package dataset (character vector), Default: c(\"world.cities\", \"maps\") tbl_index_1L_int Table index (integer vector length one), Default: integer(0) type_1L_chr Type (character vector length one), Default: 'Cities' url_1L_chr Url (character vector length one), Default: character(0) what_1L_chr (character vector length one), Default: 'Input_Seed' X_Ready4useRepos PARAM_DESCRIPTION, Default: ready4use::Ready4useRepos()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_cities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get seed cities — get_seed_cities","text":"Seed cities (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_currencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get seed currencies — get_seed_currencies","title":"Get seed currencies — get_seed_currencies","text":"get_seed_currencies() Get function retrieves pre-existing data object memory, local file system online repository. Specifically, function implements algorithm get seed currencies. Function argument names_1L_lgl specifies look required object. function returns Seed currencies (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_currencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get seed currencies — get_seed_currencies","text":"","code":"get_seed_currencies(   names_1L_lgl = F,   indices_int = 1:4,   default_pkg_ds_chr = character(0),   tbl_index_1L_int = 2L,   type_1L_chr = \"Currencies\",   url_1L_chr = \"https://en.wikipedia.org/wiki/List_of_circulating_currencies\",   what_1L_chr = \"Input_Seed\",   X_Ready4useRepos = ready4use::Ready4useRepos() )"},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_currencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get seed currencies — get_seed_currencies","text":"names_1L_lgl Names (logical vector length one), Default: F indices_int Indices (integer vector), Default: 1:4 default_pkg_ds_chr Default package dataset (character vector), Default: character(0) tbl_index_1L_int Table index (integer vector length one), Default: 2 type_1L_chr Type (character vector length one), Default: 'Currencies' url_1L_chr Url (character vector length one), Default: 'https://en.wikipedia.org/wiki/List_of_circulating_currencies' what_1L_chr (character vector length one), Default: 'Input_Seed' X_Ready4useRepos PARAM_DESCRIPTION, Default: ready4use::Ready4useRepos()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_currencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get seed currencies — get_seed_currencies","text":"Seed currencies (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get seed dataset — get_seed_ds","title":"Get seed dataset — get_seed_ds","text":"get_seed_ds() Get function retrieves pre-existing data object memory, local file system online repository. Specifically, function implements algorithm get seed dataset. Function argument label_1L_chr specifies look required object. function returns Seed dataset (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get seed dataset — get_seed_ds","text":"","code":"get_seed_ds(   label_1L_chr,   default_pkg_ds_chr = character(0),   indices_int = integer(0),   tbl_index_1L_int = integer(0),   url_1L_chr = character(0),   what_1L_chr = \"Input_Seed\",   X_Ready4useRepos = ready4use::Ready4useRepos() )"},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get seed dataset — get_seed_ds","text":"label_1L_chr Label (character vector length one) default_pkg_ds_chr Default package dataset (character vector), Default: character(0) indices_int Indices (integer vector), Default: integer(0) tbl_index_1L_int Table index (integer vector length one), Default: integer(0) url_1L_chr Url (character vector length one), Default: character(0) what_1L_chr (character vector length one), Default: 'Input_Seed' X_Ready4useRepos PARAM_DESCRIPTION, Default: ready4use::Ready4useRepos()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_seed_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get seed dataset — get_seed_ds","text":"Seed dataset (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_standardised_dss.html","id":null,"dir":"Reference","previous_headings":"","what":"Get standardised datasets — get_standardised_dss","title":"Get standardised datasets — get_standardised_dss","text":"get_standardised_dss() Get function retrieves pre-existing data object memory, local file system online repository. Specifically, function implements algorithm get standardised datasets. Function argument X_Ready4useRepos specifies look required object. function returns Standardised datasets (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_standardised_dss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get standardised datasets — get_standardised_dss","text":"","code":"get_standardised_dss(   X_Ready4useRepos,   label_1L_chr = \"Cities\",   type_chr = c(\"Input\", \"Output\"),   what_chr = make_ds_names(type_chr = character(0)) )"},{"path":"https://ready4-dev.github.io/costly/reference/get_standardised_dss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get standardised datasets — get_standardised_dss","text":"X_Ready4useRepos PARAM_DESCRIPTION label_1L_chr Label (character vector length one), Default: 'Cities' type_chr Type (character vector), Default: c(\"Input\", \"Output\") what_chr (character vector), Default: make_ds_names(type_chr = character(0))","code":""},{"path":"https://ready4-dev.github.io/costly/reference/get_standardised_dss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get standardised datasets — get_standardised_dss","text":"Standardised datasets (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_country_correspondences.html","id":null,"dir":"Reference","previous_headings":"","what":"Make country correspondences — make_country_correspondences","title":"Make country correspondences — make_country_correspondences","text":"make_country_correspondences() Make function creates new R object. Specifically, function implements algorithm make country correspondences. function returns Correspondences x (ready4 S3).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_country_correspondences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make country correspondences — make_country_correspondences","text":"","code":"make_country_correspondences(   option_1L_chr = \"custom\",   old_nms_chr = character(0),   new_nms_chr = character(0) )"},{"path":"https://ready4-dev.github.io/costly/reference/make_country_correspondences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make country correspondences — make_country_correspondences","text":"option_1L_chr Option (character vector length one), Default: 'custom' old_nms_chr Old names (character vector), Default: character(0) new_nms_chr New names (character vector), Default: character(0)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_country_correspondences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make country correspondences — make_country_correspondences","text":"Correspondences x (ready4 S3)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_country_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"Make country standards — make_country_standards","title":"Make country standards — make_country_standards","text":"make_country_standards() Make function creates new R object. Specifically, function implements algorithm make country standards. function returns Standards (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_country_standards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make country standards — make_country_standards","text":"","code":"make_country_standards(as_list_1L_lgl = F, append_ls = NULL)"},{"path":"https://ready4-dev.github.io/costly/reference/make_country_standards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make country standards — make_country_standards","text":"as_list_1L_lgl list (logical vector length one), Default: F append_ls Append (list), Default: NULL","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_country_standards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make country standards — make_country_standards","text":"Standards (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_currency_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"Make currency list — make_currency_ls","title":"Make currency list — make_currency_ls","text":"make_currency_ls() Make function creates new R object. Specifically, function implements algorithm make currency list. function called side effects return value.","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_currency_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make currency list — make_currency_ls","text":"","code":"make_currency_ls(   country_1L_chr,   currency_tb = NULL,   format_1L_chr = \"Name\",   match_var_nm_1L_chr = \"ISO code[2]\",   what_1L_chr = \"Symbol[D] orAbbrev.[3]\" )"},{"path":"https://ready4-dev.github.io/costly/reference/make_currency_ls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make currency list — make_currency_ls","text":"country_1L_chr Country (character vector length one) currency_tb Currency (tibble), Default: NULL format_1L_chr Format (character vector length one), Default: 'Name' match_var_nm_1L_chr Match variable name (character vector length one), Default: 'ISO code2' what_1L_chr (character vector length one), Default: 'SymbolD orAbbrev.3'","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_currency_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"Make currency standards — make_currency_standards","title":"Make currency standards — make_currency_standards","text":"make_currency_standards() Make function creates new R object. Specifically, function implements algorithm make currency standards. function returns Standards (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_currency_standards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make currency standards — make_currency_standards","text":"","code":"make_currency_standards(as_list_1L_lgl = F, append_ls = NULL)"},{"path":"https://ready4-dev.github.io/costly/reference/make_currency_standards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make currency standards — make_currency_standards","text":"as_list_1L_lgl list (logical vector length one), Default: F append_ls Append (list), Default: NULL","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_currency_standards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make currency standards — make_currency_standards","text":"Standards (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Make defaults — make_defaults","title":"Make defaults — make_defaults","text":"make_defaults() Make function creates new R object. Specifically, function implements algorithm make defaults. function returns Default (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make defaults — make_defaults","text":"","code":"make_defaults(   label_1L_chr = \"Standardised\",   what_1L_chr = c(\"all\", \"arguments\", \"correspondences\", \"logic\", \"seed\", \"reference\"),   force_standard_1L_lgl = F )"},{"path":"https://ready4-dev.github.io/costly/reference/make_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make defaults — make_defaults","text":"label_1L_chr Label (character vector length one), Default: 'Standardised' what_1L_chr (character vector length one), Default: c(\"\", \"arguments\", \"correspondences\", \"logic\", \"seed\", \"reference\") force_standard_1L_lgl Force standard (logical vector length one), Default: F","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make defaults — make_defaults","text":"Default (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_ds_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dataset names — make_ds_names","title":"Make dataset names — make_ds_names","text":"make_ds_names() Make function creates new R object. Specifically, function implements algorithm make dataset names. function returns Names (character vector).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_ds_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dataset names — make_ds_names","text":"","code":"make_ds_names(   label_1L_chr = \"Standardised\",   file_nm_1L_lgl = T,   type_chr = c(\"Input\", \"Output\"),   what_chr = c(\"Correspondences\", \"Lookup\", \"Seed\", \"Standards\", \"Validation\") )"},{"path":"https://ready4-dev.github.io/costly/reference/make_ds_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dataset names — make_ds_names","text":"label_1L_chr Label (character vector length one), Default: 'Standardised' file_nm_1L_lgl File name (logical vector length one), Default: T type_chr Type (character vector), Default: c(\"Input\", \"Output\") what_chr (character vector), Default: c(\"Correspondences\", \"Lookup\", \"Seed\", \"Standards\", \"Validation\")","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_ds_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make dataset names — make_ds_names","text":"Names (character vector)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_standardised_dss.html","id":null,"dir":"Reference","previous_headings":"","what":"Make standardised datasets — make_standardised_dss","title":"Make standardised datasets — make_standardised_dss","text":"make_standardised_dss() Make function creates new R object. Specifically, function implements algorithm make standardised datasets. function returns Standardised datasets (list).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_standardised_dss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make standardised datasets — make_standardised_dss","text":"","code":"make_standardised_dss(   label_1L_chr = \"Country\",   lookup_Ready4useDyad = ready4use::Ready4useDyad(),   seed_Ready4useDyad = ready4use::Ready4useDyad(),   standards_Ready4useDyad = ready4use::Ready4useDyad(),   type_chr = c(\"Input\", \"Output\"),   validation_ls = list(),   what_chr = c(\"Correspondences\", \"Lookup\", \"Seed\", \"Standards\", \"Validation\"),   correspondences_x_r3 = ready4show::ready4show_correspondences(),   correspondences_y_r3 = ready4show::ready4show_correspondences() )"},{"path":"https://ready4-dev.github.io/costly/reference/make_standardised_dss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make standardised datasets — make_standardised_dss","text":"label_1L_chr Label (character vector length one), Default: 'Country' lookup_Ready4useDyad PARAM_DESCRIPTION, Default: ready4use::Ready4useDyad() seed_Ready4useDyad PARAM_DESCRIPTION, Default: ready4use::Ready4useDyad() standards_Ready4useDyad PARAM_DESCRIPTION, Default: ready4use::Ready4useDyad() type_chr Type (character vector), Default: c(\"Input\", \"Output\") validation_ls Validation (list), Default: list() what_chr (character vector), Default: c(\"Correspondences\", \"Lookup\", \"Seed\", \"Standards\", \"Validation\") correspondences_x_r3 Correspondences x (ready4 S3), Default: ready4show::ready4show_correspondences() correspondences_y_r3 Correspondences y (ready4 S3), Default: ready4show::ready4show_correspondences()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_standardised_dss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make standardised datasets — make_standardised_dss","text":"Standardised datasets (list)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_standards_xx.html","id":null,"dir":"Reference","previous_headings":"","what":"Make standards output object of multiple potential types — make_standards_xx","title":"Make standards output object of multiple potential types — make_standards_xx","text":"make_standards_xx() Make function creates new R object. Specifically, function implements algorithm make standards output object multiple potential types. function returns Standards (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_standards_xx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make standards output object of multiple potential types — make_standards_xx","text":"","code":"make_standards_xx(   as_list_1L_lgl = T,   append_ls = NULL,   var_nms_chr = NA_character_,   label_1L_chr = \"Standardised\",   Ready4useDyad_r4 = ready4use::Ready4useDyad() )"},{"path":"https://ready4-dev.github.io/costly/reference/make_standards_xx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make standards output object of multiple potential types — make_standards_xx","text":"as_list_1L_lgl list (logical vector length one), Default: T append_ls Append (list), Default: NULL var_nms_chr Variable names (character vector), Default: 'NA' label_1L_chr Label (character vector length one), Default: 'Standardised' Ready4useDyad_r4 dataset data dictionary pair. (ready4 S4), Default: ready4use::Ready4useDyad()","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_standards_xx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make standards output object of multiple potential types — make_standards_xx","text":"Standards (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_validation_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"Make validation list — make_validation_ls","title":"Make validation list — make_validation_ls","text":"make_validation_ls() Make function creates new R object. Specifically, function implements algorithm make validation list. function returns Validation (list).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_validation_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make validation list — make_validation_ls","text":"","code":"make_validation_ls(allowed_xx, ds_df, var_nm_1L_chr, sort_1L_lgl = F)"},{"path":"https://ready4-dev.github.io/costly/reference/make_validation_ls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make validation list — make_validation_ls","text":"allowed_xx Allowed (output object multiple potential types) ds_df Dataset (data.frame) var_nm_1L_chr Variable name (character vector length one) sort_1L_lgl Sort (logical vector length one), Default: F","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_validation_ls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make validation list — make_validation_ls","text":"Validation (list)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_validation_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Make validation output — make_validation_output","title":"Make validation output — make_validation_output","text":"make_validation_output() Make function creates new R object. Specifically, function implements algorithm make validation output. function returns Output (output object multiple potential types).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_validation_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make validation output — make_validation_output","text":"","code":"make_validation_output(   allowed_xx,   ds_df,   var_nm_1L_chr,   sort_1L_lgl = F,   type_1L_chr = \"Valid\",   what_1L_chr = \"Cases\" )"},{"path":"https://ready4-dev.github.io/costly/reference/make_validation_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make validation output — make_validation_output","text":"allowed_xx Allowed (output object multiple potential types) ds_df Dataset (data.frame) var_nm_1L_chr Variable name (character vector length one) sort_1L_lgl Sort (logical vector length one), Default: F type_1L_chr Type (character vector length one), Default: 'Valid' what_1L_chr (character vector length one), Default: 'Cases'","code":""},{"path":"https://ready4-dev.github.io/costly/reference/make_validation_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make validation output — make_validation_output","text":"Output (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/manufacture-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Manufacture a new object — manufacture-CostlyCorrespondences","title":"Manufacture a new object — manufacture-CostlyCorrespondences","text":"manufacture method applied CostlyCorrespondences manufacture method applied CostlyCurrencies manufacture method applied CostlyCountries","code":""},{"path":"https://ready4-dev.github.io/costly/reference/manufacture-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manufacture a new object — manufacture-CostlyCorrespondences","text":"","code":"# S4 method for CostlyCorrespondences manufacture(   x,   sort_1L_lgl = T,   type_chr = make_ds_names(type_chr = character(0)),   what_1L_chr = c(\"dataset\", \"defaults\", \"shorthand\"),   ... )  # S4 method for CostlyCurrencies manufacture(   x,   sort_1L_lgl = T,   type_chr = make_ds_names(type_chr = character(0)),   what_1L_chr = c(\"dataset\", \"defaults\", \"shorthand\"),   ... )  # S4 method for CostlyCountries manufacture(   x,   sort_1L_lgl = T,   type_chr = make_ds_names(type_chr = character(0)),   what_1L_chr = c(\"dataset\", \"defaults\", \"shorthand\"),   ... )"},{"path":"https://ready4-dev.github.io/costly/reference/manufacture-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manufacture a new object — manufacture-CostlyCorrespondences","text":"x object class CostlyCountries sort_1L_lgl Sort (logical vector length one), Default: T type_chr Type (character vector), Default: make_ds_names(type_chr = character(0)) what_1L_chr (character vector length one), Default: c(\"dataset\", \"defaults\", \"shorthand\") ... Additional arguments","code":""},{"path":"https://ready4-dev.github.io/costly/reference/manufacture-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manufacture a new object — manufacture-CostlyCorrespondences","text":"Object (output object multiple potential types) Object (output object multiple potential types) Object (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Implements: https://github.com/sckott/analogsea/issues/32 https://github.com/rstudio/ggvis/blob/master/R/pipe.R.","code":""},{"path":"https://ready4-dev.github.io/costly/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs, rhs object function apply ","code":""},{"path":"https://ready4-dev.github.io/costly/reference/procure-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Procure items from a dataset — procure-CostlySource","title":"Procure items from a dataset — procure-CostlySource","text":"procure method applied CostlySource","code":""},{"path":"https://ready4-dev.github.io/costly/reference/procure-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Procure items from a dataset — procure-CostlySource","text":"","code":"# S4 method for CostlySource procure(   x,   matches_chr = character(0),   what_1L_chr = c(\"names\", \"concepts\"),   ... )"},{"path":"https://ready4-dev.github.io/costly/reference/procure-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Procure items from a dataset — procure-CostlySource","text":"x object class CostlySource matches_chr Matches (character vector), Default: character(0) what_1L_chr (character vector length one), Default: c(\"names\", \"concepts\") ... Additional arguments","code":""},{"path":"https://ready4-dev.github.io/costly/reference/procure-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Procure items from a dataset — procure-CostlySource","text":"Object (output object multiple potential types)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/ratify-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratify that a dataset meets validity criteria — ratify-CostlyCorrespondences","title":"Ratify that a dataset meets validity criteria — ratify-CostlyCorrespondences","text":"ratify method applied CostlyCorrespondences","code":""},{"path":"https://ready4-dev.github.io/costly/reference/ratify-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratify that a dataset meets validity criteria — ratify-CostlyCorrespondences","text":"","code":"# S4 method for CostlyCorrespondences ratify(   x,   new_val_xx = \"identity\",   sort_1L_lgl = T,   type_1L_chr = make_ds_names(type_chr = character(0))[1:2],   what_chr = make_ds_names(type_chr = character(0)),   ... )"},{"path":"https://ready4-dev.github.io/costly/reference/ratify-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratify that a dataset meets validity criteria — ratify-CostlyCorrespondences","text":"x object class CostlyCorrespondences new_val_xx New value (output object multiple potential types), Default: 'identity' sort_1L_lgl Sort (logical vector length one), Default: T type_1L_chr Type (character vector length one), Default: make_ds_names(type_chr = character(0))1:2 what_chr (character vector), Default: make_ds_names(type_chr = character(0)) ... Additional arguments","code":""},{"path":"https://ready4-dev.github.io/costly/reference/ratify-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ratify that a dataset meets validity criteria — ratify-CostlyCorrespondences","text":"x (object class CostlyCorrespondences)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/renew-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Renew values in a dataset — renew-CostlyCorrespondences","title":"Renew values in a dataset — renew-CostlyCorrespondences","text":"renew method applied CostlyCorrespondences","code":""},{"path":"https://ready4-dev.github.io/costly/reference/renew-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renew values in a dataset — renew-CostlyCorrespondences","text":"","code":"# S4 method for CostlyCorrespondences renew(   x,   new_val_xx = NULL,   type_1L_chr = \"slot\",   what_1L_chr = \"correspondences\",   ... )"},{"path":"https://ready4-dev.github.io/costly/reference/renew-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renew values in a dataset — renew-CostlyCorrespondences","text":"x object class CostlyCorrespondences new_val_xx New value (output object multiple potential types), Default: NULL type_1L_chr Type (character vector length one), Default: 'slot' what_1L_chr (character vector length one), Default: 'correspondences' ... Additional arguments","code":""},{"path":"https://ready4-dev.github.io/costly/reference/renew-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renew values in a dataset — renew-CostlyCorrespondences","text":"x (object class CostlyCorrespondences)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/transform_country.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform country — transform_country","title":"Transform country — transform_country","text":"transform_country() Transform function edits object way core object attributes - e.g. shape, dimensions, elements, type - altered. Specifically, function implements algorithm transform country. Function argument country_1L_chr specifies object updated. Argument from_1L_chr provides object updated. function returns Country (character vector length one).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/transform_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform country — transform_country","text":"","code":"transform_country(   country_1L_chr,   from_1L_chr = \"Name\",   standards_df = data.frame(),   what_1L_chr = \"Alpha_3\" )"},{"path":"https://ready4-dev.github.io/costly/reference/transform_country.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform country — transform_country","text":"country_1L_chr Country (character vector length one) from_1L_chr (character vector length one), Default: 'Name' standards_df Standards (data.frame), Default: data.frame() what_1L_chr (character vector length one), Default: 'Alpha_3'","code":""},{"path":"https://ready4-dev.github.io/costly/reference/transform_country.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform country — transform_country","text":"Country (character vector length one)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_correspondences.html","id":null,"dir":"Reference","previous_headings":"","what":"Update correspondences — update_correspondences","title":"Update correspondences — update_correspondences","text":"update_correspondences() Update function edits object, preserving core object attributes. Specifically, function implements algorithm update correspondences. Function argument correspondences_x_r3 specifies object updated. Argument standards_df provides object updated. function returns Correspondences x (ready4 S3).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_correspondences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update correspondences — update_correspondences","text":"","code":"update_correspondences(   correspondences_x_r3 = ready4show::ready4show_correspondences(),   standards_df,   standards_var_nms_chr,   seed_df,   reference_var_nm_1L_chr,   force_standard_1L_lgl = T,   fuzzy_logic_1L_chr = \"jw\",   max_distance_1L_dbl = Inf )"},{"path":"https://ready4-dev.github.io/costly/reference/update_correspondences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update correspondences — update_correspondences","text":"correspondences_x_r3 Correspondences x (ready4 S3), Default: ready4show::ready4show_correspondences() standards_df Standards (data.frame) standards_var_nms_chr Standards variable names (character vector) seed_df Seed (data.frame) reference_var_nm_1L_chr Reference variable name (character vector length one) force_standard_1L_lgl Force standard (logical vector length one), Default: T fuzzy_logic_1L_chr Fuzzy logic (character vector length one), Default: 'jw' max_distance_1L_dbl Maximum distance (double vector length one), Default: Inf","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_correspondences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update correspondences — update_correspondences","text":"Correspondences x (ready4 S3)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_country_default_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"Update country default list — update_country_default_ls","title":"Update country default list — update_country_default_ls","text":"update_country_default_ls() Update function edits object, preserving core object attributes. Specifically, function implements algorithm update country default list. Function argument default_ls specifies object updated. Argument force_standard_1L_lgl provides object updated. function returns Default (list).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_country_default_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update country default list — update_country_default_ls","text":"","code":"update_country_default_ls(default_ls, force_standard_1L_lgl = F)"},{"path":"https://ready4-dev.github.io/costly/reference/update_country_default_ls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update country default list — update_country_default_ls","text":"default_ls Default (list) force_standard_1L_lgl Force standard (logical vector length one), Default: F","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_country_default_ls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update country default list — update_country_default_ls","text":"Default (list)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_currency_correspondences.html","id":null,"dir":"Reference","previous_headings":"","what":"Update currency correspondences — update_currency_correspondences","title":"Update currency correspondences — update_currency_correspondences","text":"update_currency_correspondences() Update function edits object, preserving core object attributes. Specifically, function implements algorithm update currency correspondences. Function argument correspondences_x_r3 specifies object updated. Argument country_var_nms_chr provides object updated. function returns Correspondences x (ready4 S3).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_currency_correspondences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update currency correspondences — update_currency_correspondences","text":"","code":"update_currency_correspondences(   correspondences_x_r3 = ready4show::ready4show_correspondences(),   country_var_nms_chr = c(\"State or territory[1]\", \"Countries/ territories\"),   type_1L_chr = c(\"Both\", \"Country\", \"Currency\") )"},{"path":"https://ready4-dev.github.io/costly/reference/update_currency_correspondences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update currency correspondences — update_currency_correspondences","text":"correspondences_x_r3 Correspondences x (ready4 S3), Default: ready4show::ready4show_correspondences() country_var_nms_chr Country variable names (character vector), Default: c(\"State territory1\", \"Countries/ territories\") type_1L_chr Type (character vector length one), Default: c(\"\", \"Country\", \"Currency\")","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_currency_correspondences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update currency correspondences — update_currency_correspondences","text":"Correspondences x (ready4 S3)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_currency_default_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"Update currency default list — update_currency_default_ls","title":"Update currency default list — update_currency_default_ls","text":"update_currency_default_ls() Update function edits object, preserving core object attributes. Specifically, function implements algorithm update currency default list. Function argument default_ls specifies object updated. Argument force_standard_1L_lgl provides object updated. function returns Default (list).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_currency_default_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update currency default list — update_currency_default_ls","text":"","code":"update_currency_default_ls(default_ls, force_standard_1L_lgl = F)"},{"path":"https://ready4-dev.github.io/costly/reference/update_currency_default_ls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update currency default list — update_currency_default_ls","text":"default_ls Default (list) force_standard_1L_lgl Force standard (logical vector length one), Default: F","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_currency_default_ls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update currency default list — update_currency_default_ls","text":"Default (list)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_module_slot.html","id":null,"dir":"Reference","previous_headings":"","what":"Update module slot — update_module_slot","title":"Update module slot — update_module_slot","text":"update_module_slot() Update function edits object, preserving core object attributes. Specifically, function implements algorithm update module slot. Function argument x_r4 specifies object updated. Argument y_r3 provides object updated. function returns X (ready4 S4).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_module_slot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update module slot — update_module_slot","text":"","code":"update_module_slot(x_r4, y_r3, what_1L_chr, new_val_xx = NULL)"},{"path":"https://ready4-dev.github.io/costly/reference/update_module_slot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update module slot — update_module_slot","text":"x_r4 X (ready4 S4) y_r3 Y (ready4 S3) what_1L_chr (character vector length one) new_val_xx New value (output object multiple potential types), Default: NULL","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_module_slot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update module slot — update_module_slot","text":"X (ready4 S4)","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_with_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"Update with standards — update_with_standards","title":"Update with standards — update_with_standards","text":"update_with_standards() Update function edits object, preserving core object attributes. Specifically, function implements algorithm update standards. Function argument seed_df specifies object updated. Argument standards_df provides object updated. function returns Standardised dataset (data.frame).","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_with_standards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update with standards — update_with_standards","text":"","code":"update_with_standards(   seed_df,   standards_df,   standards_var_nms_chr,   correspondences_x_r3 = ready4show::ready4show_correspondences(),   case_when_false_1L_chr = NA_character_,   case_when_true_1L_chr = NA_character_,   case_when_true_ls = NULL,   case_when_var_1L_chr = NA_character_,   order_1L_lgl = F,   reference_var_nm_1L_chr = \"country.etc\",   filter_cdn_1L_chr = NA_character_,   force_standard_1L_lgl = F,   fuzzy_logic_1L_chr = character(0),   max_distance_1L_dbl = Inf,   tf_false_val_1L_lgl = T )"},{"path":"https://ready4-dev.github.io/costly/reference/update_with_standards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update with standards — update_with_standards","text":"seed_df Seed (data.frame) standards_df Standards (data.frame) standards_var_nms_chr Standards variable names (character vector) correspondences_x_r3 Correspondences x (ready4 S3), Default: ready4show::ready4show_correspondences() case_when_false_1L_chr Case false (character vector length one), Default: 'NA' case_when_true_1L_chr Case true (character vector length one), Default: 'NA' case_when_true_ls Case true (list), Default: NULL case_when_var_1L_chr Case variable (character vector length one), Default: 'NA' order_1L_lgl Order (logical vector length one), Default: F reference_var_nm_1L_chr Reference variable name (character vector length one), Default: 'country.etc' filter_cdn_1L_chr Filter condition (character vector length one), Default: 'NA' force_standard_1L_lgl Force standard (logical vector length one), Default: F fuzzy_logic_1L_chr Fuzzy logic (character vector length one), Default: character(0) max_distance_1L_dbl Maximum distance (double vector length one), Default: Inf tf_false_val_1L_lgl Transform false value (logical vector length one), Default: T","code":""},{"path":"https://ready4-dev.github.io/costly/reference/update_with_standards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update with standards — update_with_standards","text":"Standardised dataset (data.frame)","code":""}]
